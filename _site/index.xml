<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Non Standard Dev</title>
<link>https://non-std-dev.netlify.app/index.html</link>
<atom:link href="https://non-std-dev.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
<description>Johnny Breen's blog.</description>
<generator>quarto-1.0.38</generator>
<lastBuildDate>Thu, 08 Sep 2022 23:00:00 GMT</lastBuildDate>
<item>
  <title>Don’t default to Shiny. Go Quarto instead</title>
  <dc:creator>Johnny Breen</dc:creator>
  <link>https://non-std-dev.netlify.app/posts/overengineering/index.html</link>
  <description><![CDATA[ 




<p>I know, bold title right? But hear me out.</p>
<section id="cautionary-tale" class="level1">
<h1>Cautionary tale…</h1>
<p>A few years ago I was working as a consultant and was asked to perform some data validation for one of our clients.</p>
<p>My manager, being the kind of forward-thinking guy he was, decided that we ought to do this in R. I know what you’re thinking: “Forward-thinking? What’s so forward-thinking about R?”. In my defence, I was working in financial services at the time so, to my peers, it was probably a bit like observing a caveman walking around with an iPhone in 10,000 BC.</p>
<p>Anyway back to the project at hand. What was required, at the time, was (fairly) simple: we needed to process some input data according to various recipes and verify that the numbers reconciled to what the client had generated themselves.</p>
<p>Simple enough task, you would have thought. Except, I was a budding data analyst who had just graduated from university and had managed to get my hands on a few R projects whilst completing my degree. This meant that I had some ideas for what I wanted to do on this project. In fact, I had lots of ideas.</p>
<p>What this meant is that I didn’t <em>just</em> write the validation scripts: I went <em>all in</em>. It was <em>heavy</em> on functional programming. I encapsulated everything (and I mean <em>everything</em>, no matter how small or insignificant) into modular components. I even added a full-blown logging system to this thing.</p>
<p>And the brutal truth is… I had built an orbital laser to destroy an ant hill.</p>
<p>What was so ironic about this whole experience is that it was <em>precisely my manager</em> who had taught me all of these concepts in the first place. Clearly, I had taken his advice a bit too literally. When he came to review my code, he had some unexpectedly stern words of advice for me: less is more. I had to get rid of most of what I had written. I remember him saying words to the effect of, “We aren’t trying to build a rocket to get us to Mars. We’re trying to build a bike to get us around London”.</p>
<p>At the time, I was feeling kind of devastated. All of my hard work had been dismantled before my eyes. I felt like I had done something wrong. And.. to some extent I had done something wrong: I’d over complicated things. I had used esoteric programming paradigms where it wasn’t necessary; I had relied on third-party packages which my team would not have been familiar with; I had tried to encapsulate all components into modules which was complete overkill for a validation script (worse still, some of this encapsulation was just plain wrong: it’s bad practice to put complicated <code>switch()</code> statements into a singular function which makes different decisions based on the input argument i.e.&nbsp;what I had done!)</p>
<p>But, in a different context - within a different working environment - my solution may have worked very well!</p>
</section>
<section id="dude-what-does-this-have-to-do-with-shiny" class="level1">
<h1>Dude, what does this have to do with Shiny?</h1>
<p>OK, I appreciate that this story may have seemed like a little bit of a detour so let me get back to the main topic at hand here...</p>
<p>Let me start by saying something important: I love Shiny and Shiny is great. It’s great because it allows users to build dashboards <em>without having to know</em> HTML, CSS and JavaScript. That’s pretty cool. PS: if you haven’t checked out <a href="https://www.rstudio.com/conference/2022/keynotes/past-future-shiny/">Joe Cheng’s keynote talk</a> from <code>rstudio::conf2022</code>, then you really need to! It’s ace.</p>
<p>Instead, you just need to learn how to use Shiny and the concept of reactivity. I say ‘just’ like this is simple.. It’s not! Learning Shiny takes time and practice. Shiny is like a language in itself that exists <em>within</em> R. In fact, I’m pretty sure that you could learn how to build some pretty slick Shiny apps without knowing much R at all.</p>
<p>And this is typically where you start to run into issues. Building a ‘toy’ app for yourself or in an academic context is fine, as it isn’t likely to get too complicated. Building an enterprise application though? That’s a whole different ballgame. Suddenly you need to think a lot more about how to make your application efficient, maintainable and scalable. These are <em>software development</em> concerns more than anything else.</p>
<p>Often, all of these concerns are far beyond the skill set of a data analyst who will nonetheless build it out themselves against their best instincts. In this scenario you normally end up with two outcomes:</p>
<ul>
<li><p><strong>Beginners:</strong> the analyst builds something monolithic: all of the server-side calculations are embedded within the same application as the UI element; data is pulled, in high volumes, straight from a SQL database processed using <code>dplyr</code> . Put bluntly, this is unmaintainable and you can bet that anyone who has to work on this in the future will not be able to parse or amend the codebase</p></li>
<li><p><strong>Beginners.. who don’t realise it:</strong> sometimes you get the beginner who discovers how to write Shiny modules so ends up modularising everything. They think they’re gunslinging from the hip but, in reality, all they are doing is creating an overengineered, difficult-to-maintain application for their colleagues. Don’t be that person..!</p></li>
</ul>
<p>Both of these outcomes are bad for your team and that is what matters in an enterprise environment.</p>
<p>Really, you should only be maintaining Shiny apps if you have the right expertise on your team.</p>
<p>But it’s more than that. I would summarise my beliefs on the subject as follows:</p>
<blockquote class="blockquote">
<p>You should only be building a Shiny app if you actually <em>need</em> a Shiny app. Often, there is a simpler solution.</p>
</blockquote>
</section>
<section id="use-quarto-or-r-markdown" class="level1">
<h1>Use Quarto or R Markdown</h1>
<p>I have found, in my personal experience, that a lot of Shiny apps could probably be written into a R Markdown (or Quarto nowadays) document.</p>
<p>Now for some hotly-anticipated FAQ’s!</p>
<ol type="1">
<li>“Hang on Johnny, you can’t use R Markdown or Quarto to do reactivity”. Erm, yes you can! You can <a href="https://quarto.org/docs/interactive/shiny/">add reactive widgets to an R Markdown (or Quarto)</a> document.</li>
<li>“But isn’t that going to become a mess?”. If your application is simply providing different views of data from a remote database and the reactivity is simple, it won’t become a mess because each ‘chunk’ will basically correspond to a different view. If your application is complicated and there is some kind of non-trivial user workflow, of course: use Shiny!</li>
</ol>
<p>To summarise, I am not saying you shouldn’t use Shiny. I am saying you should think long and hard about your decision to use Shiny in the context of (a) your product complexity; and (b) your team!</p>


</section>

 ]]></description>
  <category>Programming</category>
  <category>R</category>
  <guid>https://non-std-dev.netlify.app/posts/overengineering/index.html</guid>
  <pubDate>Thu, 08 Sep 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Context managers (and why they’re great)</title>
  <dc:creator>Johnny Breen</dc:creator>
  <link>https://non-std-dev.netlify.app/posts/context-manage/index.html</link>
  <description><![CDATA[ 




<p>So listen: to be a ‘good’ data analyst you don’t need to know the ins and outs of software engineering. That would be a bit ridiculous.</p>
<p>That said, there are some software engineering ‘best practices’ that you should cherry-pick, if you will, and adopt into your workflow. And here comes my bold statement: I firmly believe that the idea of managing ‘resources’ is one such practice. I know, I know.. ‘managing resources’? You may as well be a librarian.</p>
<p>But hear me out: you probably rely on tonnes of ‘resources’ to do your daily work without even realising it. What is your management strategy?</p>
<p>Sorry, I’m getting a bit ahead of myself here. Let’s start with the most fundamental question: what do we mean by the word ‘resource’ exactly?</p>
<section id="resources-explained" class="level1">
<h1>Resources explained</h1>
<p>Suppose you are writing a program which logs result of each operation to a <code>.txt</code> file on disk. Something like this (NB: use Python’s native <code>logger</code> module to perform logging; not what follows!):</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> divide(x, y):</span>
<span id="cb1-2">  logger_file <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'app.log'</span>, <span class="st" style="color: #20794D;">'a'</span>)</span>
<span id="cb1-3">  logger_file.write(<span class="ss" style="color: #20794D;">f'Adding </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> and </span><span class="sc" style="color: #5E5E5E;">{</span>y<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">...'</span>)</span>
<span id="cb1-4">  z <span class="op" style="color: #5E5E5E;">=</span> x <span class="op" style="color: #5E5E5E;">/</span> y</span>
<span id="cb1-5">  logger_file.close()</span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;">return</span> z</span></code></pre></div>
</div>
<p>Your computer can’t just <em>write</em> this call to the file straight away. If you think about it, a few steps have to happen first:</p>
<ol type="1">
<li>If this file is hosted on another machine, your machine needs to gain access to the other machine (and potentially requires authentication)</li>
<li>Then, pending success on step 1, a connection to this file must be opened</li>
<li>Data is then written into the file via the connection channel</li>
<li>Finally, on the <em>attempt</em> of step 2 (regardless of success or failure), the connection to the file should be closed</li>
</ol>
<p>In this context, your ‘resource’ is the logging file <code>app.log</code>; more formally, a ‘resource’ is a piece of software or hardware that is accessed and manipulated over a network. And, as you can see in the above, you need to <em>manage</em> this resource to avoid complications later down the line.</p>
<p>What kind of complications am I speaking of? Most data analysts will be able to execute steps 1-3 successfully (because, well, they <em>have</em> to). But, again and again, I see far too many analysts fail to carry out step 4, which is the most important step.</p>
</section>
<section id="how-things-can-go-wrong" class="level1">
<h1>How things can go wrong</h1>
<p>The question you have to ask yourself here is what if the step in between <code>open()</code> and <code>close()</code> fails? In other words, what if <code>z = x / y</code> fails? Well, it will at some point because I have news for you: you can’t divide by zero,</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb2-2">  divide(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">ZeroDivisionError</span> <span class="im" style="color: #00769E;">as</span> err:</span>
<span id="cb2-4">  <span class="bu" style="color: null;">print</span>(err)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>division by zero</code></pre>
</div>
</div>
<p>Think about the control flow of our function <code>divide()</code> for a second: once it encounters an error, it will not close the file. Execution will terminate and the connection to our file will be left open. This is not an issue with a small number of connections but imagine that you are running this call, repeatedly, millions of times. There is a cost to maintaining millions of open connections: memory leakage.</p>
<p>We are using a contrived example to demonstrate the point here. This issue becomes much more pertinent when interacting with remote database systems.</p>
</section>
<section id="how-to-fix-it-theres-more-than-one-way" class="level1">
<h1>How to fix it (there’s more than one way)</h1>
<p>So how can we improve this? Well, we need to make sure we close the file <em>whatever</em> happens. We can achieve this with the <code>try: … except: … else: … finally: …</code> syntax in Python:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> divide(x, y):</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb4-3">    logger_file <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'app.log'</span>, <span class="st" style="color: #20794D;">'a'</span>)</span>
<span id="cb4-4">    logger_file.write(<span class="ss" style="color: #20794D;">f'Adding </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> and </span><span class="sc" style="color: #5E5E5E;">{</span>y<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">...'</span>)</span>
<span id="cb4-5">    z <span class="op" style="color: #5E5E5E;">=</span> x <span class="op" style="color: #5E5E5E;">/</span> y</span>
<span id="cb4-6">  <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">ZeroDivisionError</span> <span class="im" style="color: #00769E;">as</span> err:</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;">raise</span> err</span>
<span id="cb4-8">  <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb4-9">    logger_file.close()</span>
<span id="cb4-10">  <span class="cf" style="color: #003B4F;">return</span> z</span></code></pre></div>
</div>
<p>With this syntax in place, any snippets which fall under the <code>finally</code> clause will always be executed regardless of success or failure.</p>
<p>The thing is: that’s a lot of boilerplate to be adding to all of your functions and methods. There has to be a simpler way, surely? You’re in luck: Python has a better way.</p>
<p>You can build your own context managers by either implementing a class with an <code>__enter__()</code> and <code>__exit()__</code> method or you can leverage the native Python module <code>contextlib</code> to achieve the same thing. I recommend you check out <a href="https://book.pythontips.com/en/latest/context_managers.html">this link</a> for a thorough explanation of these resources.</p>
</section>
<section id="where-i-find-this-useful" class="level1">
<h1>Where I find this useful</h1>
<p>I manage database cursors (which are used toe execute queries against a database) using the context management protocol.</p>
<p>You can see this with a simple SQLite setup as below,</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> contextlib <span class="im" style="color: #00769E;">import</span> contextmanager </span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;">class</span> SQLite():</span>
<span id="cb5-4"></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, database_path):</span>
<span id="cb5-6">        <span class="va" style="color: #111111;">self</span>.database_path <span class="op" style="color: #5E5E5E;">=</span> database_path</span>
<span id="cb5-7">        <span class="va" style="color: #111111;">self</span>._conn <span class="op" style="color: #5E5E5E;">=</span> sqlite3.<span class="ex" style="color: null;">connect</span>(database_path, detect_types<span class="op" style="color: #5E5E5E;">=</span>sqlite3.PARSE_DECLTYPES)</span>
<span id="cb5-8">        <span class="va" style="color: #111111;">self</span>._conn.row_factory <span class="op" style="color: #5E5E5E;">=</span> sqlite3.Row</span>
<span id="cb5-9">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Connection opened.'</span>)</span>
<span id="cb5-10"></span>
<span id="cb5-11">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__repr__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-12">        <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f'SQLite object (path: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>database_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)'</span></span>
<span id="cb5-13">    </span>
<span id="cb5-14">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__str__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-15">        <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f'SQLite object (path: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>database_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)'</span></span>
<span id="cb5-16">    </span>
<span id="cb5-17">    <span class="kw" style="color: #003B4F;">def</span> close(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-18">        <span class="va" style="color: #111111;">self</span>._conn.close()</span>
<span id="cb5-19">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Connection closed.'</span>)</span>
<span id="cb5-20"></span>
<span id="cb5-21">    <span class="at" style="color: #657422;">@contextmanager</span></span>
<span id="cb5-22">    <span class="kw" style="color: #003B4F;">def</span> cursor(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-23">        cursor <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._conn.cursor()</span>
<span id="cb5-24">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb5-25">            <span class="cf" style="color: #003B4F;">yield</span> cursor</span>
<span id="cb5-26">        <span class="cf" style="color: #003B4F;">except</span> sqlite3.Error <span class="im" style="color: #00769E;">as</span> err:</span>
<span id="cb5-27">            <span class="cf" style="color: #003B4F;">raise</span> err</span>
<span id="cb5-28">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb5-29">            <span class="va" style="color: #111111;">self</span>._conn.commit()     </span>
<span id="cb5-30">        <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb5-31">            cursor.close()</span></code></pre></div>
</div>
<p>Everything before the <code>yield</code> keyword represents the acquisition of resources (i.e.&nbsp;the cursor). This is followed by the generation of the <code>cursor</code> object. Then, on exit of the method everything below the <code>yield</code> keyword is executed, including the closure of the cursor object.</p>
<p>Pretty neat!</p>


</section>

 ]]></description>
  <category>Python</category>
  <category>Programming</category>
  <guid>https://non-std-dev.netlify.app/posts/context-manage/index.html</guid>
  <pubDate>Sat, 20 Aug 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Why it’s hard to examine programming abilities</title>
  <dc:creator>Johnny Breen</dc:creator>
  <link>https://non-std-dev.netlify.app/posts/stop-coding-exams/index.html</link>
  <description><![CDATA[ 




<p>Why is it so difficult to write a timed exam to assess somebody’s programming skills?</p>
<p>Well, for me it all starts with what makes somebody a good programmer. When I first learnt how to write code, I didn’t really learn how to <em>write code</em>.</p>
<p>I learnt how to solve a problem using code as a tool. This was good to some degree - there’s a lot of satisfaction in solving a problem using code. But it was also bad for reasons I would not have been able to perceive at the time.</p>
<p>You see, there’s an astronomical difference between writing code for yourself, and writing code for other people (including your future self). In industry, we often do the latter not the former which means that code quality and organisation is paramount.</p>
<p>But if you’re sitting a timed exam where ‘getting the answer’ is the most important goal then you understandably have no incentive to improve your code quality. Without wanting to compromise standards too much though, I happen to believe that this approach is sub-optimal.</p>
<p>Personally, I am a fan of a coursework-based approach (I’m also a fan of not grading the coursework either). If we simply require candidates to do their best and come up with an interesting angle on an appropriate schema of data using R or Python and issue a simple ‘Pass’ or ‘Fail’, then I can guarantee that they will learn something useful.</p>
<p>Yes, it will be more difficult to mark, but candidates will come away with a much greater understanding of how to write code than they ever would have via an examination format.</p>
<p>There is the risk of plagiarism with this approach but I think we ought to be teaching people how to be better software developers, not <em>just</em> trying to maintain standards. If 5% of candidates commit plagiarism, you can be sure they haven’t learnt anything. And ultimately that is <em>their</em> loss. We should accept that these anomalies may slip through the cracks.</p>
<p>The other 95% however? They will benefit immensely from a chance to implement their skills in a personal project, regardless of what grade they are given.</p>



 ]]></description>
  <category>Teaching</category>
  <category>Programming</category>
  <guid>https://non-std-dev.netlify.app/posts/stop-coding-exams/index.html</guid>
  <pubDate>Wed, 17 Aug 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Closures</title>
  <dc:creator>Johnny Breen</dc:creator>
  <link>https://non-std-dev.netlify.app/posts/closures/index.html</link>
  <description><![CDATA[ 




<p>Another day goes by and another poor sod finds themselves trawling through Google to figure out what on earth a closure is.</p>
<p>Well, I say that as if this is some kind of ‘hot’ topic in the <a href="https://twitter.com/search?q=%23rstats&amp;src=typed_query">#rstats</a> community: it’s not. If anything it’s ‘hot’ for all the wrong reasons: we’ve all come across the error ‘object of type closure is not subsettable’ before.</p>
<p>You can be a very capable data scientist and have no clue what a closure is. But, I actually <em>like</em> this stuff. Plus, this concept is something that is shared amongst other popular programming languages like JavaScript, Swift and Ruby so it’s kind of useful to know what it is.</p>
<p>So, presuming you’re not bored yet and still wondering what I’m on about, have a little look at the following code snippet and have a little think about what would happen if I called <code>g</code>. Try to think about it yourself before scrolling further!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Returns another function which has the ability to print the value for the symbol `text`</span></span>
<span id="cb1-2">f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb1-3">  </span>
<span id="cb1-4">  text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Here!"</span></span>
<span id="cb1-5">  </span>
<span id="cb1-6">  <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;">print</span>(text)</span>
<span id="cb1-8">  }</span>
<span id="cb1-9">}</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># Returns a call to the function returned by `f()` (above)</span></span>
<span id="cb1-12">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb1-13">  </span>
<span id="cb1-14">  text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"There!"</span></span>
<span id="cb1-15">  </span>
<span id="cb1-16">  print_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">f</span>()</span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;">print_text</span>()</span>
<span id="cb1-18">}</span></code></pre></div>
</div>
<p>Have you thought about it yet?</p>
<p>Good. OK: here goes nothing!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">g</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Here!"</code></pre>
</div>
</div>
<p>Boom. Now, if you aren’t a regular user of R this behaviour could be quite bemusing. For instance, we have defined two values for the symbol <code>text</code>: how does R select one of them?</p>
<p>Even if you are a regular user of R, you may still be wondering <em>how</em> to explain this. And you wouldn’t really be able to without first understanding the concept of closures and lexical scope. So let me attempt to elucidate things for you slightly :wink:</p>
<section id="a-simple-example" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-example">A simple example</h2>
<p>The example shown above is a little bit complicated.</p>
<p>So let’s start with something really simple and build up the complexity as we go. First, take a look at this function</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">open <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb4-2">  x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb4-3">}</span></code></pre></div>
</div>
<p>You’ll see why I’ve called it ‘open’ in a minute.</p>
<p>Most users of R understand that if we tried to run <code>open</code>, as is, we would face an error because we haven’t yet defined a value for <code>x</code> within the function body or within the global environment.</p>
<p>Let’s verify that with a quick call,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">open</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in open(): object 'x' not found</code></pre>
</div>
</div>
<p>This of course changes once we assign a value to the symbol <code>x</code>, say, within the global environment,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">open</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
</div>
<p>The question is: <em>how</em> does <code>open</code> locate a value for the symbol <code>x</code>? I mean, we haven’t defined it inside the function body so how does <code>open</code> ‘jump up’ into the global environment whilst it is executing?</p>
</section>
<section id="expressions-closures" class="level2">
<h2 class="anchored" data-anchor-id="expressions-closures">Expressions &amp; closures</h2>
<p>Take a look at the following function <code>closed</code>,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">closed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y) {</span>
<span id="cb9-2">  x <span class="sc" style="color: #5E5E5E;">+</span> y</span>
<span id="cb9-3">}</span></code></pre></div>
</div>
<p>This function is a <em>closed</em> expression because each and every symbol that is defined inside the body of <code>g</code> has a corresponding value (supplied as arguments to the parameters <code>x</code> and <code>y</code>).</p>
<p>By contrast, the aforementioned function <code>open</code> is an <em>open</em> expression,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">open <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb10-2">  x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb10-3">}</span></code></pre></div>
</div>
<p>This is because the symbol <code>x</code> is not defined anywhere within the function itself. We call <code>x</code> a <em>free</em> variable in this context. It needs a value; it needs <em>closure</em>.</p>
<p>When we created <code>open</code>, we assigned it to the global environment,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">rlang<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">env_has</span>(<span class="at" style="color: #657422;">env =</span> .GlobalEnv, <span class="at" style="color: #657422;">nms =</span> <span class="st" style="color: #20794D;">"open"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>open 
TRUE </code></pre>
</div>
</div>
<p>When you define a function inside a given context (say, the global environment, as we just did), that function will assign and <em>maintain</em> values associated with all of the <em>free</em> variables of that function expression which exist within the surrounding context (and the context surrounding <em>that</em> context and so on, recursively).</p>
<p>Phew. That’s a lot of words! Let’s look at an example to make this a little easier to understand.</p>
<p>For example,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">t <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb13-2">u <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb13-3">v <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb13-4">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-5"></span>
<span id="cb13-6">open <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb13-7">  x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb13-8">}</span></code></pre></div>
</div>
<p>In this case, the surrounding environment of <code>open</code> is as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Surrounding context of 'open'</span></span>
<span id="cb14-2">{</span>
<span id="cb14-3">  t<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb14-4">  u<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb14-5">  v<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb14-6">  x<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb14-7">}</span></code></pre></div>
</div>
<p>The <em>closure</em> of <code>open</code> is a subset of this environment: it is the set of key-value pairs which transform <code>open</code> from an <em>open</em> expression into a <em>closed</em> expression. In this case, we only care about <code>x</code>,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Closure of 'open'</span></span>
<span id="cb15-2">{</span>
<span id="cb15-3">  x<span class="sc" style="color: #5E5E5E;">:</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb15-4">}</span></code></pre></div>
</div>
<p>This is what a closure is!</p>
</section>
<section id="inner-functions" class="level2">
<h2 class="anchored" data-anchor-id="inner-functions">Inner functions</h2>
<p>Let’s go back to our initial problem.</p>
<p>We have a function <code>f</code> that is defined like so,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Returns another function which has the ability to print the value for the symbol `text`</span></span>
<span id="cb16-2">f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb16-3">  </span>
<span id="cb16-4">  text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Here!"</span></span>
<span id="cb16-5">  </span>
<span id="cb16-6">  <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb16-7">    <span class="fu" style="color: #4758AB;">print</span>(text)</span>
<span id="cb16-8">  }</span>
<span id="cb16-9">}</span></code></pre></div>
</div>
<p>Notice that <code>f</code> returns a <em>function</em> as an output.</p>
<p>I’m going to assign a name to this inner function to make things a bit easier to explain,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Returns another function which has the ability to print the value for the symbol `text`</span></span>
<span id="cb17-2">f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb17-3">  </span>
<span id="cb17-4">  text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Here!"</span></span>
<span id="cb17-5">  </span>
<span id="cb17-6">  inner <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb17-7">    <span class="fu" style="color: #4758AB;">print</span>(text)</span>
<span id="cb17-8">  }</span>
<span id="cb17-9">  </span>
<span id="cb17-10">  <span class="fu" style="color: #4758AB;">return</span>(inner)</span>
<span id="cb17-11">}</span></code></pre></div>
</div>
<p>The important thing to note here, once again, is that the <code>inner</code> function is not <em>executed</em>, but is instead <em>defined</em> when <code>f</code> is called. So think of ‘call <code>f</code>’ and ‘define <code>inner</code>’ as being equivalent statements.</p>
<p>When you run <code>f()</code>, here’s what happens.</p>
<p>First, you create another function (which I have just named <code>print_text</code>),</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">print_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">f</span>()</span>
<span id="cb18-2"></span>
<span id="cb18-3">print_text</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>function() {
    print(text)
  }
&lt;environment: 0x12004e7b8&gt;</code></pre>
</div>
</div>
<p>However, something else also happens behind the scenes which you don’t see: upon definition, the inner function creates a <em>snapshot</em> of the free variables (i.e.&nbsp;<code>text</code>) in its surrounding context,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">{</span>
<span id="cb20-2">  text<span class="sc" style="color: #5E5E5E;">:</span> <span class="st" style="color: #20794D;">"Here!"</span></span>
<span id="cb20-3">}</span></code></pre></div>
</div>
<p>In effect, the inner function ‘encloses’ its surrounding context.</p>
<p>This is the <em>closure</em> of <code>inner</code> and this is how <code>inner</code> gets a value for <code>text</code>. This value is maintained even after <code>f</code> finishes executing.</p>
</section>
<section id="lexical-scope-versus-dynamic-scope" class="level2">
<h2 class="anchored" data-anchor-id="lexical-scope-versus-dynamic-scope">Lexical scope versus dynamic scope</h2>
<p>The concept of closures is closely related to the concept of lexical scope.</p>
<p>Let’s do a full reprise and bring <code>g</code> back into the equation,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb21-2">  </span>
<span id="cb21-3">  text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Here!"</span></span>
<span id="cb21-4">  </span>
<span id="cb21-5">  inner <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb21-6">    <span class="fu" style="color: #4758AB;">print</span>(text)</span>
<span id="cb21-7">  }</span>
<span id="cb21-8">  </span>
<span id="cb21-9">  <span class="fu" style="color: #4758AB;">return</span>(inner)</span>
<span id="cb21-10">}</span>
<span id="cb21-11"></span>
<span id="cb21-12">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb21-13">  </span>
<span id="cb21-14">  text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"There!"</span></span>
<span id="cb21-15">  </span>
<span id="cb21-16">  print_text <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">f</span>()</span>
<span id="cb21-17">  <span class="fu" style="color: #4758AB;">print_text</span>()</span>
<span id="cb21-18">}</span></code></pre></div>
</div>
<p>We now know that when we call <code>f</code> - and create <code>inner</code> - a closure is created for the <code>inner</code> function which allows it to lookup the value of <code>text</code>, “Here!”, when it is invoked.</p>
<p>In other words, the <code>inner</code> function binds values to its ‘free’ symbols according to <em>where</em> it is defined in the source code itself (this is lexical scoping). It does <em>not</em>, by contrast, bind its values based on how it is called (this is dynamic scoping).</p>
<p>The word ‘lexical’ is used because it is indicative of text or source code. The word ‘dynamic’ is used because it is indicative of a ‘runtime’ definition.</p>
<p>To relate this to the example above,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">g</span>() <span class="co" style="color: #5E5E5E;"># lexical scope - R does this</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Here!"</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">g</span>() <span class="co" style="color: #5E5E5E;"># dynamic scope - R does not do this</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "There!"</code></pre>
</div>
</div>
<p>The latter would be an implementation of dynamic scope because, if the variable <code>text</code> were scoped at runtime rather than where it was defined in the source code, it would simply look at the call stack (rather than the ‘definition stack’ if that’s even a word) and see <code>text &lt;- "There!"</code>.</p>
</section>
<section id="why-is-this-cool" class="level2">
<h2 class="anchored" data-anchor-id="why-is-this-cool">Why is this cool?</h2>
<p>OK, so why does this even matter as a concept? Well, for one you now understanding something better than you did before: is the intrinsic joy of learning not enough for you?</p>
<p>If you’re looking for a cool application, run over to <a href="https://adv-r.hadley.nz/function-factories.html#stateful-funs">this chapter</a> of Hadley Wickham’s book Advanced R to see how you can create a function which counts how many times it has been called!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Programming</category>
  <guid>https://non-std-dev.netlify.app/posts/closures/index.html</guid>
  <pubDate>Fri, 18 Feb 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
